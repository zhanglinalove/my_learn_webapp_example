{"version":3,"sources":["../src/app.js"],"names":["require","bcrypt","UserModel","config","auth","connectMongodb","session","MongoStore","express","expressLayouts","useragent","path","favicon","logger","cookieParser","bodyParser","api","page","app","set","join","__dirname","use","json","urlencoded","extended","static","cookieName","secret","sessionSecret","store","url","mongodbUrl","resave","saveUninitialized","authUser","req","res","next","err","Error","status","locals","message","error","get","format","send","toString","html","render","default","errorDetails","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["require('./models/init');\n\nvar bcrypt = require ('bcrypt');\nvar UserModel = require('./models/user');\nvar config = require('./config');\nvar auth = require('./middlewares/auth');\nvar connectMongodb = require('connect-mongo');\nvar session = require('express-session');\nvar MongoStore = new connectMongodb(session);\n\n\n\nvar express = require('express');\nvar expressLayouts = require('express-ejs-layouts');\nvar useragent = require('express-useragent');\n//var ipfilter = require('express-ipfilter').IpFilter;\n\n\n\n\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\n\n\nvar api = require('./routes/router.api');\nvar page = require('./routes/router.page');\n\nvar app = express();\n//var ips = ['127.0.0.1'];\n\n\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\napp.use(expressLayouts);\n//app.use(ipfilter(ips));\n\n\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n//app.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(useragent.express());\napp.use(cookieParser(config.cookieName));\napp.use(\n  session({\n    secret: config.sessionSecret,\n    store: new MongoStore({\n      url: config.mongodbUrl\n    }),\n    resave: true,\n    saveUninitialized: true\n  })\n);\napp.use(auth.authUser);\n\n\n\n\n\n// Create the server\n/*\napp.use( function( req ,res ,next){\n  console.log(req.useragent);\n\n});\n*/\n\napp.use('/', page);\napp.use('/api/v1', api);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message || err;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // the error response\n  res.status(err.status || 500);\n  res.format({\n    json() {\n      res.send({error: err.toString()});\n    },\n\n    html() {\n      res.render('error');\n    },\n\n    default() {\n      const message = `${errorDetails}`;\n      res.send(`500 Internal server error:\\n${err.toString()}`);\n    },\n  });\n});\n\nmodule.exports = app;\n"]}